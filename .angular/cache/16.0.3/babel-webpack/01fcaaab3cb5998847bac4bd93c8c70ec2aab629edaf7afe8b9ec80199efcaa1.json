{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nclass IaService {\n  constructor() {\n    this.store = new BehaviorSubject({\n      response: null,\n      loading: true\n    });\n    this._store$ = this.store.asObservable();\n    this.API_BASE = \"http://localhost:4000/api/cuentaFanClan\";\n    this.http = inject(HttpClient);\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    this.answerQuestion = question => {\n      return this.http.post(`${this.API_BASE}/search`, {\n        \"query\": question\n      }, this.httpOptions);\n    };\n  }\n  getState() {\n    return this._store$;\n  }\n  setState(data) {\n    this.store.next(data);\n  }\n}\nIaService.ɵfac = function IaService_Factory(t) {\n  return new (t || IaService)();\n};\nIaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: IaService,\n  factory: IaService.ɵfac,\n  providedIn: 'root'\n});\nexport { IaService };","map":{"version":3,"names":["inject","HttpClient","HttpHeaders","BehaviorSubject","IaService","constructor","store","response","loading","_store$","asObservable","API_BASE","http","httpOptions","headers","answerQuestion","question","post","getState","setState","data","next","factory","ɵfac","providedIn"],"sources":["C:\\IA\\front-bot-ia-vector\\src\\app\\services\\ia.service.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nexport interface Chatbot {\r\n  response: any;\r\n  loading: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class IaService {\r\n  private store = new BehaviorSubject<Chatbot>({ response: null, loading: true });\r\n  private _store$ = this.store.asObservable();\r\n  private readonly API_BASE = \"http://localhost:4000/api/cuentaFanClan\";\r\n  private readonly http = inject(HttpClient);\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  };\r\n  constructor() { }\r\n\r\n  answerQuestion = (question: string): Observable<any> => {\r\n    return this.http.post(`${this.API_BASE}/search`, { \"query\": question }, this.httpOptions);\r\n  }\r\n\r\n  getState(): Observable<Chatbot> {\r\n    return this._store$;\r\n  }\r\n\r\n  setState(data: Chatbot) {\r\n    this.store.next(data);\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAAqBA,MAAM,QAAQ,eAAe;AAClD,SAASC,UAAU,EAAEC,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,eAAe,QAAoB,MAAM;;AAOlD,MAIaC,SAAS;EAUpBC,YAAA;IATQ,KAAAC,KAAK,GAAG,IAAIH,eAAe,CAAU;MAAEI,QAAQ,EAAE,IAAI;MAAEC,OAAO,EAAE;IAAI,CAAE,CAAC;IACvE,KAAAC,OAAO,GAAG,IAAI,CAACH,KAAK,CAACI,YAAY,EAAE;IAC1B,KAAAC,QAAQ,GAAG,yCAAyC;IACpD,KAAAC,IAAI,GAAGZ,MAAM,CAACC,UAAU,CAAC;IAC1C,KAAAY,WAAW,GAAG;MACZC,OAAO,EAAE,IAAIZ,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;IAGD,KAAAa,cAAc,GAAIC,QAAgB,IAAqB;MACrD,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACN,QAAQ,SAAS,EAAE;QAAE,OAAO,EAAEK;MAAQ,CAAE,EAAE,IAAI,CAACH,WAAW,CAAC;IAC3F,CAAC;EAJe;EAMhBK,QAAQA,CAAA;IACN,OAAO,IAAI,CAACT,OAAO;EACrB;EAEAU,QAAQA,CAACC,IAAa;IACpB,IAAI,CAACd,KAAK,CAACe,IAAI,CAACD,IAAI,CAAC;EACvB;;AAtBWhB,SAAS,C;mBAATA,SAAS;AAAA;AAATA,SAAS,C;SAATA,SAAS;EAAAkB,OAAA,EAATlB,SAAS,CAAAmB,IAAA;EAAAC,UAAA,EAHR;AAAM;SAGPpB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}